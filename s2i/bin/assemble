#!/bin/bash

PID_FILE=/tmp/nuxeo.pid

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "---> Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2
  fi
}

# insert settings for HTTP proxy into settings.xml if supplied
function configure_studio() {
  if [ -n "$NUXEO_CONNECT_USERNAME" -a -n "$NUXEO_CONNECT_PASSWORD" ]; then
    xml="<server>\
      <id>nuxeo-studio</id>\
      <username>$NUXEO_CONNECT_USERNAME</username>\
      <password>$NUXEO_CONNECT_PASSWORD</password>\
    </server>"
    sed -i "s|<!-- ### configured studio credentials ### -->|$xml|" $HOME/.m2/settings.xml
    sed -i "s|<connect.password>****</connect.password>|<connect.password>$NUXEO_CONNECT_PASSWORD</connect.password>|" $HOME/.m2/settings.xml
  fi
}


function configure_connect() {

  if [ -n "$NUXEO_CONNECT_USERNAME" -a -n "$NUXEO_CONNECT_PASSWORD" -a -n "$NUXEO_STUDIO_PROJECT" ]; then  
    echo "---> Configuring connect credentials"
    /docker-entrypoint.sh nuxeoctl register $NUXEO_CONNECT_USERNAME $NUXEO_STUDIO_PROJECT dev openshift-dev $NUXEO_CONNECT_PASSWORD
  fi
}

# Check if the server http port is up
function ishttpup() {
  count=0
  while [ ${count} -lt 64 ]
  do
    if curl --head --silent --fail --location --max-time 2 "127.0.0.1:8080" > /dev/null; then
      echo "---> Found 127.0.0.1:8080 listening port"
      return 0
    fi
    let count=${count}+1
  done

  return 1
}

function fixRights() {
  dir=$1
  mkdir -p $dir \
  && chgrp -fR 0 $dir \
  && chmod -fR g+rwX $dir
}



# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR


# Resulting artifact directory
BUILD_DIR=/build

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar) to the build directory.
# Default values may be overriden in a .nuxeo-s2i file at the project's root
ARTIFACT_DIR=${ARTIFACT_DIR:-target}
NUXEO_PACKAGE_DIR=${NUXEO_PACKAGE_DIR:-marketplace/target}

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR

if [ -f $LOCAL_SOURCE_DIR/settings.xml ]; then
  echo "---> Copying Maven settings from project..."
  mkdir -p $HOME/.m2
  mv $LOCAL_SOURCE_DIR/settings.xml $HOME/.m2
fi

if [ -f /connect.properties ]; then
  echo "---> Found connect.properties file"  
  . /connect.properties
else 
  echo "---> No connect.properties found"
fi

configure_studio

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null  

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift,nuxeo -DskipTests -B"
  fi

  # If MAVEN_SETTINGS specified will always add to MAVEN_ARGS
  # Can be relative to application root
  # Can be global to image
  if [ -z "$MAVEN_SETTINGS" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS -s $HOME/.m2/settings.xml"
  else
    if [[ "$MAVEN_SETTINGS" = /* ]]; then
       [ ! -e "$MAVEN_SETTINGS" ] && echo "---> Specified settings file does not exist in the image. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $MAVEN_SETTINGS"
    else
       [ ! -e "$LOCAL_SOURCE_DIR/$MAVEN_SETTINGS" ] && echo "---> Specified settings file does not exist in your source code. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/$MAVEN_SETTINGS"
    fi
  fi

  #Â Append user provided args
  if [ -n "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi

  CONTAINER_HEAP_PERCENT=${CONTAINER_HEAP_PERCENT:-0.50}
  CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`

  DEFAULT_MEMORY_CEILING=$((2**40-1))
  if [ "${CONTAINER_MEMORY_IN_BYTES}" -lt "${DEFAULT_MEMORY_CEILING}" ]; then
    CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
    CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
    JAVA_HEAP_MAX=-Xmx${CONTAINER_HEAP_MAX}
  fi

  if [ -z $JAVA_GC_OPTS ]; then
    # note - MaxPermSize no longer valid with v8 of the jdk ... used to have -XX:MaxPermSize=100m
    JAVA_GC_OPTS="-XX:+UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MaxMetaspaceSize=100m"
  fi
  if [ ! -z "${CONTAINER_CORE_LIMIT}" ]; then
    JAVA_CORE_LIMIT="-XX:ParallelGCThreads=${CONTAINER_CORE_LIMIT} -Djava.util.concurrent.ForkJoinPool.common.parallelism=${CONTAINER_CORE_LIMT} -XX:CICompilerCount=2"
  fi
  if [ ! -z "${USE_JAVA_DIAGNOSTICS}" ]; then
    JAVA_DIAGNOSTICS="-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
  fi

  # When arguments such as max heap size are repeated, the JVM respects the last value provided,
  # so by setting the user provided MAVEN_OPTS value last, we allow the user to override any 
  # of the values we calculated above.
  MAVEN_OPTS=$JAVA_GC_OPTS $JAVA_HEAP_MAX $JAVA_CORE_LIMIT $JAVA_DIAGNOSTICS $MAVEN_OPTS

  echo "---> Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "---> Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  popd &> /dev/null
fi

if [ -f $LOCAL_SOURCE_DIR/.nuxeo-s2i ]; then
  echo "---> Found .nuxeo-s2i file : "
  cat $LOCAL_SOURCE_DIR/.nuxeo-s2i
  . $LOCAL_SOURCE_DIR/.nuxeo-s2i
fi

# Move built artifacts (if any!) from the target/ directory
# (or $ARTIFACT_DIR if specified)
if [ -d $LOCAL_SOURCE_DIR/$ARTIFACT_DIR ]; then
  echo "---> Moving all JARs from $ARTIFACT_DIR"
  mkdir -p $BUILD_DIR/artifacts
  cp $LOCAL_SOURCE_DIR/$ARTIFACT_DIR/*.jar $BUILD_DIR/artifacts
fi

if [ -f $LOCAL_SOURCE_DIR/nuxeo.conf ]; then
  echo "---> Copying nuxeo.conf from project..."
  cp $LOCAL_SOURCE_DIR/nuxeo.conf /$BUILD_DIR/nuxeo.conf  
fi

if [ -n $NUXEO_PACKAGE_DIR ]; then   
  if [ -d $LOCAL_SOURCE_DIR/$NUXEO_PACKAGE_DIR ]; then
    mkdir -p $BUILD_DIR/marketplace
    cp $LOCAL_SOURCE_DIR/$NUXEO_PACKAGE_DIR/*.zip $BUILD_DIR/marketplace/  
  fi
fi


if [[ ( -n $NUXEO_SMOKE_TEST ) && ( "true" == $NUXEO_SMOKE_TEST ) ]]; then

  # This logic is intended to deploy the app as part of assemble
  # but many apps fail to deploy because they require additional
  # resources to be present, eg databases, which are not available
  # at build time, so don't do this for now.

  echo "---> Installing artifacts"
  /build/install.sh

  echo "---> Starting Nuxeo for test"
  /docker-entrypoint.sh nuxeoctl startbg

  echo $! > ${PID_FILE}

  rc=0
  ishttpup || rc=$?
  if [ $rc -eq 1 ]; then
    echo "---> Timed out waiting for http listening port for nuxeo process"
    exit 1
  fi

  # TODO: add a handler for Maven functional tests
  if [[ ( -n $MAVEN_VERIFY ) && ( $MAVEN_VERIFY == "true") ]]; then
    pushd $LOCAL_SOURCE_DIR
    mvn verify
    rc=$?
    popd
  else 
    curl --silent --fail --location --max-time 2 -u Administrator:Administrator http://127.0.0.1:8080/nuxeo/api/v1/path/default-domain/workspaces > /dev/null
    rc=$?
  fi
  
  rm ${PID_FILE}
  echo "---> Stopping Nuxeo"
  /docker-entrypoint.sh nuxeoctl stop

  echo "---> Resetting image configuration"
  rm -f $NUXEO_HOME/configured
  rm -f /etc/nuxeo/nuxeo.conf
  fixRights /var/lib/nuxeo/data
  fixRights /var/log/nuxeo
  fixRights /var/run/nuxeo
  fixRights /docker-entrypoint-initnuxeo.d
  exit $rc

fi

exit 0

